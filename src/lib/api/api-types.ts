/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/circuits/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all circuits
         * @description Retrieve a list of all circuits with their associated SvelteFlow models, nodes, and edges.
         */
        get: operations["circuits_list"];
        put?: never;
        /**
         * Create a new circuit
         * @description Create a new circuit with optional SvelteFlow model data including nodes and edges.
         */
        post: operations["circuits_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/circuits/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a specific circuit
         * @description Get detailed information about a specific circuit including its SvelteFlow model.
         */
        get: operations["circuits_retrieve"];
        /**
         * Update a circuit
         * @description Completely update a circuit and its associated SvelteFlow model.
         */
        put: operations["circuits_update"];
        post?: never;
        /**
         * Delete a circuit
         * @description Delete a circuit and all its associated data including SvelteFlow model, nodes, and edges.
         */
        delete: operations["circuits_destroy"];
        options?: never;
        head?: never;
        /**
         * Partially update a circuit
         * @description Partially update a circuit and its associated SvelteFlow model.
         */
        patch: operations["circuits_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Serializer for Circuit with nested SvelteFlowModel.
         *
         *     This serializer handles complete circuit data including:
         *     - Basic circuit information (name, description, timestamps)
         *     - Associated SvelteFlow model with visual layout data
         *     - Circuit nodes (electrical components with positions)
         *     - Circuit edges (connections between components) */
        Circuit: {
            readonly id: number;
            /** @description Name of the circuit */
            name: string;
            /** @description Description of the circuit */
            description?: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            readonly svelte_flow_model: components["schemas"]["SvelteFlowModel"];
        };
        /** @description Serializer for Circuit with nested SvelteFlowModel.
         *
         *     This serializer handles complete circuit data including:
         *     - Basic circuit information (name, description, timestamps)
         *     - Associated SvelteFlow model with visual layout data
         *     - Circuit nodes (electrical components with positions)
         *     - Circuit edges (connections between components) */
        CircuitRequest: {
            /** @description Name of the circuit */
            name: string;
            /** @description Description of the circuit */
            description?: string;
        };
        /** @description Measured dimensions for a node. */
        Measured: {
            /** Format: double */
            width: number;
            /** Format: double */
            height: number;
        };
        /** @description Metadata for SvelteFlow model. */
        Metadata: {
            nodeCounter: number;
            lastModified: string | null;
        };
        /** @description Data type information for a node. */
        NodeData: {
            type: string;
        };
        PaginatedCircuitList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Circuit"][];
        };
        /** @description Serializer for Circuit with nested SvelteFlowModel.
         *
         *     This serializer handles complete circuit data including:
         *     - Basic circuit information (name, description, timestamps)
         *     - Associated SvelteFlow model with visual layout data
         *     - Circuit nodes (electrical components with positions)
         *     - Circuit edges (connections between components) */
        PatchedCircuitRequest: {
            /** @description Name of the circuit */
            name?: string;
            /** @description Description of the circuit */
            description?: string;
        };
        /** @description Position coordinates for a node. */
        Position: {
            /** Format: double */
            x: number;
            /** Format: double */
            y: number;
        };
        /** @description Serializer for SvelteFlowEdge. */
        SvelteFlowEdge: {
            readonly id: string;
            /** @description Source node ID */
            source: string;
            sourceHandle: string;
            /** @description Target node ID */
            target: string;
            targetHandle: string;
            readonly style: string | null;
        };
        /** @description Serializer for SvelteFlowModel nested within Circuit. */
        SvelteFlowModel: {
            readonly nodes: components["schemas"]["SvelteFlowNode"][];
            readonly edges: components["schemas"]["SvelteFlowEdge"][];
            readonly metadata: components["schemas"]["Metadata"];
        };
        /** @description Serializer for SvelteFlowNode. */
        SvelteFlowNode: {
            readonly id: string;
            type: string;
            readonly position: components["schemas"]["Position"];
            readonly data: components["schemas"]["NodeData"];
            readonly measured: components["schemas"]["Measured"];
            /** @description Whether the node is selected */
            selected?: boolean;
            /** @description Whether the node is being dragged */
            dragging?: boolean;
        };
        /** @description Serializer for SvelteFlowNode. */
        SvelteFlowNodeRequest: {
            type: string;
            /** @description Whether the node is selected */
            selected?: boolean;
            /** @description Whether the node is being dragged */
            dragging?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    circuits_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCircuitList"];
                };
            };
        };
    };
    circuits_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Circuit"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    circuits_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Circuit. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Circuit"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    circuits_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Circuit. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CircuitRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CircuitRequest"];
                "multipart/form-data": components["schemas"]["CircuitRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Circuit"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    circuits_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Circuit. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    circuits_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Circuit. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCircuitRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCircuitRequest"];
                "multipart/form-data": components["schemas"]["PatchedCircuitRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Circuit"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
